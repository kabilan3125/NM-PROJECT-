{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO4hwmqXCZWNd92cHziixJ9",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kabilan3125/NM-PROJECT-/blob/main/Kabilan.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7shjUKXTuZoF",
        "outputId": "eaa1369c-cc66-461c-ff2a-7710bc3bbaeb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Recommendations for 'The Matrix':\n",
            "1    The Godfather\n",
            "2        Toy Story\n",
            "3     Pulp Fiction\n",
            "Name: title, dtype: object\n"
          ]
        }
      ],
      "source": [
        "# import pandas\n",
        "\n",
        "import pandas as pd\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.metrics.pairwise import linear_kernel\n",
        "\n",
        "# Load movie data\n",
        "movies = pd.DataFrame({\n",
        "    'movie_id': [1, 2, 3, 4, 5],\n",
        "    'title': ['The Matrix', 'The Godfather', 'Toy Story', 'Pulp Fiction', 'Finding Nemo'],\n",
        "    'description': [\n",
        "        'sci-fi action dystopia',\n",
        "        'crime mafia drama',\n",
        "        'animated toys friendship',\n",
        "        'crime thriller non-linear',\n",
        "        'animated underwater adventure'\n",
        "    ]\n",
        "})\n",
        "\n",
        "#  Transform descriptions into TF-IDF vectors\n",
        "tfidf = TfidfVectorizer(stop_words='english')\n",
        "tfidf_matrix = tfidf.fit_transform(movies['description'])\n",
        "\n",
        "#  Compute similarity between movies\n",
        "cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)\n",
        "\n",
        "# Step  Build a reverse map of indices\n",
        "indices = pd.Series(movies.index, index=movies['title'])\n",
        "\n",
        "#  Recommendation function\n",
        "def recommend(title, cosine_sim=cosine_sim):\n",
        "    idx = indices[title]\n",
        "    sim_scores = list(enumerate(cosine_sim[idx]))\n",
        "    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:4]\n",
        "    movie_indices = [i[0] for i in sim_scores]\n",
        "    return movies['title'].iloc[movie_indices]\n",
        "\n",
        "# Example usage\n",
        "print(\"Recommendations for 'The Matrix':\")\n",
        "print(recommend('The Matrix'))"
      ]
    }
  ]
}